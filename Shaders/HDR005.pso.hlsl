//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/HDR005.pso /Fcshaderdump19/HDR005.pso.dis
//
//
// Parameters:
//
float4 HDRParam : register(c1);
float4 TESR_ReciprocalResolution : register(c17);
float4 TESR_ToneMapping : register(c19);

sampler2D ScreenSpace : register(s0);
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   HDRParam     const_1       1
//   ScreenSpace         texture_0       1
//

#include "Includes/Color.hlsl"

// Structures:

struct VS_OUTPUT {
    float2 ScreenOffset : TEXCOORD0;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

// Resolution is specified as 4 decimal places for width followed by 4 decimal
// places for height after the period.
// Heights below 1000 must be specified with a leading zero.
float2 get_resolution() {
    float width = trunc(TESR_ToneMapping.x);
    float height = (TESR_ToneMapping.x - width) * 10000;
    return float2(width, height);
}

float4 blur(sampler2D s, float2 uv, float2 dir) {
    static const int samples = 16;

    float4 color = 0.0;
    uv -= samples / 2 * dir;

    [unroll]
    for (int i = 0; i < samples; ++i) {
        color += max(tex2D(ScreenSpace, uv), 0);
        uv += dir;
    }

    return color / samples;
}

float4 main(float2 uv: TEXCOORD0): COLOR0 {
    // Workaround for negative colors on game objects.
    //float4 color = max(tex2D(ScreenSpace, uv), 0);

    //float2 ps = TESR_ReciprocalResolution.xy;
    float2 res = get_resolution();
    uv.y *= res.x / res.y;
    float4 color = max(tex2D(ScreenSpace, uv), 0);
    //float4 color = blur(ScreenSpace, uv, float2(0, ps.y * ar));

    return color;
}

PS_OUTPUT _main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    float3 color;
	float3 result;

    color = tex2D(ScreenSpace, IN.ScreenOffset.xy).rgb;

	color = pow(abs(color), TESR_ToneMapping.w);
    result = GetRGBfromXYZ(max(GetXYZfromRGB(color) - HDRParam.x, 0) * HDRParam.y);
	result = pow(abs(result), 1.0 / TESR_ToneMapping.w);

    OUT.color_0.a = 1;
    OUT.color_0.rgb = result;

    return OUT;
};

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
