//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
// Parameters:

row_major float4x4 ModelViewProj : register(c0);
float3 LightDirection[3] : register(c13);
float4 ShadowProjTransform : register(c23);
float4 ShadowProjData : register(c24);
float4 TESR_FogData : register(c25);
float4 TESR_FogColor : register(c26);

// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   ModelViewProj[0]       const_0        1
//   ModelViewProj[1]       const_1        1
//   ModelViewProj[2]       const_2        1
//   ModelViewProj[3]       const_3        1
//   LightDirection[0]      const_13       1
//   ShadowProjTransform const_23      1
//   ShadowProjData      const_24      1
//


// Structures:

struct VS_INPUT {
    float4 LPOSITION : POSITION;
    float4 LTEXCOORD_0 : TEXCOORD0;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float2 texcoord_0 : TEXCOORD0;
    float4 texcoord_2 : TEXCOORD2;
    float3 texcoord_3 : TEXCOORD3;
	float4 color_0 : COLOR0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

    float2 q0;
    float2 q1;
	float4 r0;
	
    q0.xy = ShadowProjTransform.zw - IN.LPOSITION.xy;
	r0.xyzw = mul(ModelViewProj, IN.LPOSITION.xyzw);
    OUT.position.xyzw = r0.xyzw;
    q1.xy = (IN.LTEXCOORD_0.xy / 512) + ShadowProjTransform.xy;
    OUT.texcoord_0.xy = q1.xy;
	OUT.texcoord_2.xyz = 1.0f;
    OUT.texcoord_2.w = 1.0f - saturate((ShadowProjData.x - length(q0.xy)) / ShadowProjData.y);
    OUT.texcoord_3.xyz = LightDirection[0].xyz;
    OUT.color_0.a = 1 - saturate((TESR_FogData.y - length(r0.xyz)) / (TESR_FogData.y - TESR_FogData.x));
    OUT.color_0.rgb = TESR_FogColor.rgb;
    return OUT;
	
};

// approximately 23 instruction slots used